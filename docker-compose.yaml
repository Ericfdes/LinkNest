
services:
  # ASP.net Core API services
  backend:
    container_name: LinkNest.backend
    build: 
      context: ./Backend/Backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ASPNETCORE_HTTP_PORTS=3000
        - ASPNETCORE_HTTPS_PORTS=3001
        - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
        - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/backend.pfx
        - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
    volumes:
      - ./Backend/Backend/certs:/https:ro ## it's basically <host_path>:<container_path>:<options>

    depends_on:
      db:
        condition:  service_healthy
    networks:
      - app-network


  #frontend Serives
  frontend:
    container_name: LinkNest.frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - app-network



  # Database
  db:
    container_name: LinkNest.db
    image: mcr.microsoft.com/mssql/server
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
    volumes:
      - sql_data:/var/opt/mssql       # Persistent DB storage

 
    networks:
      - app-network
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
      interval: 30s
      timeout: 3s
      retries: 10
      start_period: 10s

#  Shared named volumes (DB persistence)
volumes:
  sql_data:

#  Shared network so containers can reach each other by name
networks:
  app-network:
    driver: bridge
